// att-defs.js

module.exports = Object.freeze({
  // L2CAP Channel ID for Attribute Protcol (ATT)
  ATT_CID: 0x0004,

  // Attribute Protocol Opcodes
  ATT_OP_ERROR: 0x01,
  ATT_OP_MTU_REQ: 0x02,
  ATT_OP_MTU_RESP: 0x03,
  ATT_OP_FIND_INFO_REQ: 0x04,
  ATT_OP_FIND_INFO_RESP: 0x05,
  ATT_OP_FIND_BY_TYPE_VALUE_REQ: 0x06,
  ATT_OP_FIND_BY_TYPE_VALUE_RESP: 0x07,
  ATT_OP_READ_BY_TYPE_REQ: 0x08,
  ATT_OP_READ_BY_TYPE_RESP: 0x09,
  ATT_OP_READ_REQ: 0x0a,
  ATT_OP_READ_RESP: 0x0b,
  ATT_OP_READ_BLOB_REQ: 0x0c,
  ATT_OP_READ_BLOB_RESP: 0x0d,
  ATT_OP_READ_MULTIPLE_REQ: 0x0e,
  ATT_OP_READ_MULTIPLE_RESP: 0x0f,
  ATT_OP_READ_BY_GROUP_REQ: 0x10,
  ATT_OP_READ_BY_GROUP_RESP: 0x11,
  ATT_OP_WRITE_REQ: 0x12,
  ATT_OP_WRITE_CMD: 0x52,
  ATT_OP_SIGNED_WRITE_CMD: 0xd2,
  ATT_OP_WRITE_RESP: 0x13,
  ATT_OP_PREPARE_WRITE_REQ: 0x16,
  ATT_OP_PREPARE_WRITE_RESP: 0x17,
  ATT_OP_EXECUTE_WRITE_REQ: 0x18,
  ATT_OP_EXECUTE_WRITE_RESP: 0x19,
  ATT_OP_HANDLE_NOTIFY: 0x1b,
  ATT_OP_HANDLE_IND: 0x1d,
  ATT_OP_HANDLE_CNF: 0x1e,

  // Error codes for error response PDU
  ATT_ECODE_SUCCESS: 0x00,
  ATT_ECODE_INVALID_HANDLE: 0x01,
  ATT_ECODE_READ_NOT_PERM: 0x02,
  ATT_ECODE_WRITE_NOT_PERM: 0x03,
  ATT_ECODE_INVALID_PDU: 0x04,
  ATT_ECODE_AUTHENTICATION: 0x05,
  ATT_ECODE_REQ_NOT_SUPP: 0x06,
  ATT_ECODE_INVALID_OFFSET: 0x07,
  ATT_ECODE_AUTHORIZATION: 0x08,
  ATT_ECODE_PREP_QUEUE_FULL: 0x09,
  ATT_ECODE_ATTR_NOT_FOUND: 0x0a,
  ATT_ECODE_ATTR_NOT_LONG: 0x0b,
  ATT_ECODE_INSUFF_ENCR_KEY_SIZE: 0x0c,
  ATT_ECODE_INVAL_ATTR_VALUE_LEN: 0x0d,
  ATT_ECODE_UNLIKELY: 0x0e,
  ATT_ECODE_INSUFF_ENC: 0x0f,
  ATT_ECODE_UNSUPP_GRP_TYPE: 0x10,
  ATT_ECODE_INSUFF_RESOURCES: 0x11,

  // ATT attribute permission bitfield values
  ATT_PERM_READ: 0x01,
  ATT_PERM_WRITE: 0x02,
  ATT_PERM_READ_ENCRYPT: 0x04,
  ATT_PERM_WRITE_ENCRYPT: 0x08,
  ATT_PERM_READ_AUTHEN: 0x10,
  ATT_PERM_WRITE_AUTHEN: 0x20,
  ATT_PERM_AUTHOR: 0x40,
  ATT_PERM_NONE: 0x80,
});
